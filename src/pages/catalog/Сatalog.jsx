import { useState, useContext, useEffect } from "react";
import { Link } from "react-router-dom";
import { CategoryContext } from "../../providers/category";
import { BrandContext } from "../../providers/brand";
import { AuthContext } from "../../providers/auth";
import Probimg from "../../images/gaming-laptops-og-image-C_hhqOLl.webp";

function Catalog() {
  const { cart,userData,setCart } = useContext(AuthContext);
  const { categoryData, categoryLoading } = useContext(CategoryContext);
  const { brandData, brandLoading } = useContext(BrandContext);

  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");

  // üîπ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const productsPerPage = 6;

  const fetchProducts = async (page = 1, query = "") => {
    setLoading(true);
    try {
      let url = `${process.env.REACT_APP_API}api/products/?page=${page}`;
      if (query) {
        url += `&q=${encodeURIComponent(query)}`;
      }

      const res = await fetch(url);
      if (!res.ok) {
        setLoading(false);
        return;
      }
      const data = await res.json();
      setProducts(data.results || []);
      setTotalPages(
        data.num_pages
      );
      setLoading(false);
    } catch (err) {
      console.log(err);
      setLoading(false);
    }
  };

  useEffect(() => {
    // üîé –í—ã–∑—ã–≤–∞–µ–º fetch –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const delayDebounce = setTimeout(() => {
      fetchProducts(currentPage, searchTerm);
    }, 300); // –Ω–µ–±–æ–ª—å—à–æ–π –¥–µ–±–∞—É–Ω—Å, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏

    return () => clearTimeout(delayDebounce);
  }, [currentPage, searchTerm]);

  const handleAddToCart = async (product) => {
  try {
    const bodyData = {
      product: product.id,  
      count: 1,          
      price: product.price,
      product_name: product.title
    };

    const res = await fetch(`${process.env.REACT_APP_API}accounts/bucket/`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      credentials: "include",
      body: JSON.stringify(bodyData),
    });

    if (res.ok) {
      const data = await res.json();

        setCart((prev) => {
        // –∏—â–µ–º –∏–Ω–¥–µ–∫—Å –æ–±—ä–µ–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –∂–µ id
        const index = prev.findIndex(item => item.id === data.id);
      
        if (index !== -1) {
          // –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º count
          const updated = [...prev];
          updated[index].count += 1;
          return updated;
        } else {
          // –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
          return [...prev, data];
        }
      });
    } else {
      const err = await res.json();
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:", err);
    }
  } catch (error) {
    console.error("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:", error);
  }
  };

  return (
    <div className="catalog">
      {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      {categoryLoading ? (
        <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</h2>
      ) : (
        <div className="category-buttons">
          {categoryData.map((cat) => (
            <button key={cat.id}>{cat.title}</button>
          ))}
        </div>
      )}

      {/* –ë—Ä–µ–Ω–¥—ã */}
      {brandLoading ? (
        <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–µ–Ω–¥–æ–≤...</h2>
      ) : (
        <div className="brand-buttons">
          {brandData.map((brand) => (
            <button key={brand.id}>{brand.title}</button>
          ))}
        </div>
      )}

      <h1>–ö–∞—Ç–∞–ª–æ–≥</h1>

      {/* üîé –ü–æ–∏—Å–∫ */}
      <div className="search-box">
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞..."
          value={searchTerm}
          onChange={(e) => {
            setSearchTerm(e.target.value);
            setCurrentPage(1); // —Å–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
          }}
        />
      </div>

      {/* üõçÔ∏è –¢–æ–≤–∞—Ä—ã */}
      <div className="products">
        {loading ? (
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
        ) : products.length > 0 ? (
          products.map((prod) => (
            <div key={prod.id} className="product-card">
              <img src={prod.cover || Probimg} alt={prod.title} />
              <h3>
                <Link to={`/details/${prod.id}`}>{prod.title}</Link>
              </h3>
              <p>{prod.price} —Å–æ–º</p>
              { userData && 
              <button onClick={() => handleAddToCart(prod)}>–í –∫–æ—Ä–∑–∏–Ω—É</button>
              }
            </div>
          ))
        ) : (
          <p>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
        )}
      </div>

      {/* üìå –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      {totalPages > 1 && (
        <div className="pagination">
          <button
            className="prev"
            disabled={currentPage === 1}
            onClick={() => setCurrentPage((p) => p - 1)}
          >
            –ù–∞–∑–∞–¥
          </button>

          {Array.from({ length: totalPages }, (_, i) => (
            <button
              key={i + 1}
              className={currentPage === i + 1 ? "active" : ""}
              onClick={() => setCurrentPage(i + 1)}
            >
              {i + 1}
            </button>
          ))}

          <button
            className="next"
            disabled={currentPage === totalPages}
            onClick={() => setCurrentPage((p) => p + 1)}
          >
            –í–ø–µ—Ä—ë–¥
          </button>
        </div>
      )}

      {/* üõí –ö–æ—Ä–∑–∏–Ω–∞ */}

      { userData && 
      <div className="cart">
        <h2>–ö–æ—Ä–∑–∏–Ω–∞</h2>
        {cart.length > 0 ? (
          <ul>
            {cart.map((item, idx) => (
              <li key={idx}>
                {item.product_name} - {item.price} —Å–æ–º  ( {item.count} )
              </li>
            ))}
          </ul>
        ) : (
          <p>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
        )}
      </div>
      }
    </div>
  );
}

export default Catalog;
